import logging
import os
from datetime import timedelta, datetime

import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor
import asyncio

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware

API_TOKEN = '6374996873:AAHC8QoTa9Bfwme-CMaRB0rADZuuWevADxw'

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
# logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ callback_data
questions_dict = {
    'registration_roboforex': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –±—Ä–æ–∫–µ—Ä–µ "ROBOFOREX"',
    'registration_binance': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –±–∏—Ä–∂–µ "Binance"',
    'replenishment_broker_account': "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–æ–∫–µ—Ä—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞",
    'withdrawal_broker_account': "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±—Ä–æ–∫–µ—Ä—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞",
    'remote_desktop_registration': "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞ (–£–†–°)",
    'order_rd_installation': "–ó–∞–∫–∞–∑ –£–†–° –¥–ª—è –¥–≤—É—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏ –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
    'terminal_installation_rd': "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–∞ –£–†–° –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞",
    'opening_partner_account': "–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞",
    'eve_installation_setup': "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ EVE",
    'hermes_installation_setup': "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ HERMES",
    'forex_for_beginners': "FOREX –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
images_list = ['images/1.jpg', 'images/2.jpg', 'images/3.jpg', 'images/4.jpg', 'images/5.jpg', 'images/6.jpg']


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
def get_inline_keyboard():
    inline_keyboard = InlineKeyboardMarkup()
    inline_keyboard.add(InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    return inline_keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def send_next_image(message: types.Message):
    if not hasattr(send_next_image, "current_image_index"):
        send_next_image.current_image_index = 0

    current_image_index = send_next_image.current_image_index

    if current_image_index < len(images_list):
        image_path = images_list[current_image_index]
        with open(image_path, 'rb') as photo:
            await message.answer_photo(photo, reply_markup=get_inline_keyboard())

        send_next_image.current_image_index += 1
    else:
        await show_main_menu(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message: types.Message):
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_row1 = ["–¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∏"]
    buttons_row2 = ["–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞", "FAQ"]
    buttons_row3 = ["–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏"]
    keyboard_markup.add(*buttons_row1)
    keyboard_markup.row(*buttons_row2)
    keyboard_markup.row(*buttons_row3)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    send_next_image.current_image_index = 0
    await send_next_image(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
@dp.callback_query_handler(lambda c: c.data == 'next')
async def process_callback_next(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await send_next_image(callback_query.message)


async def fetch_calendar_events(start_date, end_date):
    try:
        url = "https://news.investforum.ru/events/?f=json&culture=ru&view=range&start={0}&end={1}&countrycode=AR,AU," \
              "AT,BE,BR,CA,CL,CN,CO,CZ,DK,EMU,DE,FI,FR,GR,HK,HU,IS,IN,ID,IE,IT,JP,MX,NL,NZ,NO,PL,PT,RO,RU,SG,SK,ZA," \
              "KR,ES,SE,CH,TR,UK,US,PE&categories=c94405b5-5f85-4397-ab11-002a481c4b92," \
              "33303f5e-1e3c-4016-ab2d-ac87e98f57ca,e229c890-80fc-40f3-b6f4-b658f3a02635," \
              "91da97bd-d94a-4ce8-a02b-b96ee2944e4c,24127f3b-edce-4dc4-afdf-0b3bd8a964be," \
              "fa6570f6-e494-4563-a363-00d0f2abec37,e9e957ec-2927-4a77-ae0c-f5e4b5807c16," \
              "7dfaef86-c3fe-4e76-9421-8958cc2f9a0d," \
              "9c4a731a-d993-4d55-89f3-dc707cc1d596&volatility=3&timezone=Russian+Standard+Time".format(
            start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d"))
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
            async with session.get(url) as response:
                if response.status == 200:
                    return await response.json(content_type="text/plain")
                else:
                    return None
    except (aiohttp.ClientOSError, asyncio.TimeoutError):
        return None


def format_calendar_message(events):
    msg = "<b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</b>\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö\n\n"
    if events:
        date_time_obj_date = ''
        for event in events:
            date_time_str = event['DateTime']['DateStr']
            date_time_obj = datetime.strptime(date_time_str, '%Y%m%d %H:%M:%S')
            if date_time_obj.date() != date_time_obj_date:
                date_time_obj_date = date_time_obj.date()
                msg += f"üìÖ <b>{date_time_obj.date()}</b>\n\n"
            msg += "<b>{time} {country} {currency}</b>\n{name}\n".format(
                time=date_time_obj.time().strftime('%H:%M'),
                country=event['Country'],
                currency=event['Currency'],
                name=event['Name']
            )
            if event['DisplayActual'] or event['DisplayConsensus'] or event['DisplayPrevious']:
                msg += "{actual}{consensus}{previous}\n".format(
                    actual='<b>–§–∞–∫—Ç.:</b> <code>{}</code> '.format(event['DisplayActual']) if event[
                        'DisplayActual'] else '',
                    consensus='<b>–ü—Ä–æ–≥–Ω–æ–∑:</b> <code>{}</code> '.format(event['DisplayConsensus']) if event[
                        'DisplayConsensus'] else '',
                    previous='<b>–ü—Ä–µ–¥.:</b> <code>{}</code> '.format(event['DisplayPrevious']) if event[
                        'DisplayPrevious'] else ''
                )
            msg += "\n"
    return msg


async def send_robot_options(message: types.Message):
    keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
    hermes_button = types.InlineKeyboardButton("HERMES", callback_data="hermes")
    eve_button = types.InlineKeyboardButton("EVE", callback_data="eve")
    keyboard_markup.add(hermes_button, eve_button)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ–º–æ—à–Ω–∏–∫–∞:", reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda query: query.data in ["hermes", "eve"])
async def process_robot_selection(query: types.CallbackQuery):
    robot = query.data
    if robot == "hermes":
        caption = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç , –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, —Ç–∞–∫ –∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. HERME$ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞, —Å–Ω–∏–∂–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å.\n–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –Ω–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ: XAUUSD (–ó–æ–ª–æ—Ç–æ/–î–æ–ª–ª–∞—Ä)\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 34.990 —Ä—É–±–ª–µ–π"
        photo_file = "images/hermes.jpg"
    elif robot == "eve":
        caption = "EVE - —ç—Ç–æ —Å–æ–≤–µ—Ç–Ω–∏–∫, –∏–º–µ—é—â–∏–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.\n–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –Ω–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ: XAUUSD (–ó–æ–ª–æ—Ç–æ/–î–æ–ª–ª–∞—Ä).\n–ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∞–º—ã—Ö –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∏ –æ–ø–∞—Å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞ –±–∏—Ä–∂–µ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 74.990 —Ä—É–±–ª–µ–π"
        photo_file = 'images/eve.jpg'
    else:
        return

    with open(photo_file, 'rb') as photo:
        await bot.send_photo(chat_id=query.from_user.id, photo=photo, caption=caption,
                             reply_markup=types.InlineKeyboardMarkup().add(
                                 types.InlineKeyboardButton("–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞",
                                                            callback_data="bya_robot")))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Bya Robot"
@dp.callback_query_handler(lambda query: query.data == "bya_robot")
async def process_bya_robot(query: types.CallbackQuery):
    await query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è FAQ
    inline_keyboard_markup = types.InlineKeyboardMarkup()
    inline_keyboard_markup.add(types.InlineKeyboardButton("FAQ", callback_data="faq"))
    await bot.send_message(query.from_user.id, "–í–Ω–∏–º–∞–Ω–∏–µ! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ FAQ\n\n"
                                               "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @pipisods",
                           reply_markup=inline_keyboard_markup)


class ProfitCalculationState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_lot = State()


async def ask_for_amount(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞"
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_markup.add(types.KeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞"))

    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", reply_markup=keyboard_markup)
    await ProfitCalculationState.waiting_for_amount.set()


@dp.message_handler(state=ProfitCalculationState.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        sum_for_calculation = message.text
        await state.update_data(sum_for_calculation=sum_for_calculation)

        keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_markup.add("0.01", "0.015", "0.02")
        keyboard_markup.add("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞")

        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç:", reply_markup=keyboard_markup)
        await ProfitCalculationState.waiting_for_lot.set()
    else:
        await finish_profit_calculation(message, state)
        return


@dp.message_handler(state=ProfitCalculationState.waiting_for_lot)
async def process_profit_calculation(message: types.Message, state: FSMContext):
    if message.text in ["0.01", "0.015", "0.02"]:
        data = await state.get_data()
        sum_for_calculation = data.get("sum_for_calculation")

        orders = {
            "0.01": [0.18, 0.3, 0.5, 0.83, 1.32, 2.175, 3.59, 5.925, 9.78, 16.14, 26.635],
            "0.015": [0.27, 0.45, 0.75, 1.245, 1.98, 3.265, 5.385, 8.8875, 14.67, 24.21, 39.9525],
            "0.02": [0.36, 0.6, 1, 1.66, 2.64, 4.35, 7.18, 11.85, 19.56, 32.28, 53.27],
        }

        result_message = "–ù–∞–ø–æ–º–∏–Ω–∞—é, –ª–æ—Ç –∑–∞–≤—ã—à–∞—Ç—å –Ω–µ–ª—å–∑—è! –†–∞–±–æ—Ç–∞–µ–º –Ω–µ –±–æ–ª—å—à–µ 0.02/1000 –±–∞–∫—Å–æ–≤, –∏–º–µ—è –ø—Ä–∏ —Ç–∞–∫–æ–º –ª–æ—Ç–µ 100% –¥–æ–ª–∏–≤. –ü—Ä–∏–±—ã–ª—å —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –µ—â–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é take-profit —Ü–µ–Ω—ã\n\n"
        for i, order in enumerate(orders[message.text], 10):
            profit = float(sum_for_calculation) / 100 * order
            result_message += f"{i}—ã–π –æ—Ä–¥–µ—Ä {profit:.2f}$ | {order:.2f}%\n"

        await bot.send_message(chat_id=message.from_user.id, text=result_message)
    else:
        await finish_profit_calculation(message, state)
        return


@dp.message_handler(lambda message: message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞")
async def finish_profit_calculation(message: types.Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—à–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_row1 = ["–¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∏"]
    buttons_row2 = ["–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞", "FAQ"]
    buttons_row3 = ["–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏"]
    keyboard_markup.add(*buttons_row1)
    keyboard_markup.row(*buttons_row2)
    keyboard_markup.row(*buttons_row3)

    await message.answer("–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é PDF-—Ñ–∞–π–ª–∞
async def send_pdf(chat_id, question):
    pdf_file_path = os.path.join('pdf', f'{question}.pdf')
    with open(pdf_file_path, 'rb') as file:
        await bot.send_document(chat_id, file)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é URL-—Å—Å—ã–ª–∫–∏
async def send_url(chat_id, url):
    await bot.send_message(chat_id, f"–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É: {url}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
@dp.callback_query_handler(lambda query: query.data in questions_dict.keys())
async def process_question_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    question = callback_query.data  # questions_dict[callback_query.data]
    await send_pdf(callback_query.from_user.id, question)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
@dp.callback_query_handler(lambda query: query.data == "services")
async def process_services_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û—Ç–ø—Ä–∞–≤–∫–∞ URL-–∫–Ω–æ–ø–æ–∫ –¥–ª—è "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
    inline_keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    url_buttons = {
        "ROBOFOREX": "https://my.roboforex.com/en/?a=eerz",
        "Forex-Box": "https://my.forex-box.com/aff.php?aff=11631",
        "Binance": "https://www.binance.info/ru/https://accounts.binance.info/register?ref=205514549",
        "–ù–∞—à Telegram –∫–∞–Ω–∞–ª": "https://t.me/byasha_international",
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": "https://t.me/pipisods"
    }
    for text, url in url_buttons.items():
        inline_keyboard_markup.add(types.InlineKeyboardButton(text, url=url))

    await bot.send_message(callback_query.from_user.id, "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:", reply_markup=inline_keyboard_markup)


@dp.callback_query_handler(lambda query: query.data == "faq")
async def open_faq(callback_query: types.CallbackQuery):
    await callback_query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    inline_keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    inline_keyboard_markup.add(types.InlineKeyboardButton("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã", callback_data="services"))
    for callback_data, question in questions_dict.items():
        inline_keyboard_markup.add(types.InlineKeyboardButton(question, callback_data=callback_data))

    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=inline_keyboard_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text in ["–¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∏", "FAQ", "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏"])
async def handle_button_click(message: types.Message):
    if message.text == "–¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∏":
        await send_robot_options(message)
    elif message.text == "FAQ":
        inline_keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        inline_keyboard_markup.add(types.InlineKeyboardButton("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã", callback_data="services"))
        for callback_data, question in questions_dict.items():
            inline_keyboard_markup.add(types.InlineKeyboardButton(question, callback_data=callback_data))

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=inline_keyboard_markup)
    elif message.text == "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏":
        today = datetime.today()
        monday = today - timedelta(days=today.weekday())
        sunday = today + timedelta(days=(6 - today.weekday()))

        events = await fetch_calendar_events(monday, sunday)
        if events is not None:
            msg = format_calendar_message(events)
            await message.answer(msg, parse_mode="HTML")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message_handler(lambda message: message.text.lower() == "—Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞")
async def start_profit_calculation(message: types.Message, state: FSMContext):
    await ask_for_amount(message)


if __name__ == '__main__':
    # Set up polling
    dp.middleware.setup(LoggingMiddleware())
    executor.start_polling(dp, skip_updates=True)
